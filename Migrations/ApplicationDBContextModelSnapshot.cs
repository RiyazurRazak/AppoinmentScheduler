// <auto-generated />
using System;
using AppoinmentScheduler.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AppoinmentScheduler.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    partial class ApplicationDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AppoinmentScheduler.Models.Appoinments", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedOrganizationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndRange")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Intreval")
                        .IsRequired()
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganizationId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartRange")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedOrganizationId");

                    b.ToTable("Appoinments");
                });

            modelBuilder.Entity("AppoinmentScheduler.Models.RootUsers", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IamSlug")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganizationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RootUsers");
                });

            modelBuilder.Entity("AppoinmentScheduler.Models.Slots", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AppoinmentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BookedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsBooked")
                        .HasColumnType("bit");

                    b.Property<int>("SlotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SlotId"));

                    b.Property<DateTime>("SlotTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SlotUserById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AppoinmentId");

                    b.HasIndex("SlotUserById");

                    b.ToTable("Slots");
                });

            modelBuilder.Entity("AppoinmentScheduler.Models.Users", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganizationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("AppoinmentScheduler.Models.Appoinments", b =>
                {
                    b.HasOne("AppoinmentScheduler.Models.RootUsers", "CreatedOrganization")
                        .WithMany()
                        .HasForeignKey("CreatedOrganizationId");

                    b.Navigation("CreatedOrganization");
                });

            modelBuilder.Entity("AppoinmentScheduler.Models.Slots", b =>
                {
                    b.HasOne("AppoinmentScheduler.Models.Appoinments", "Appoinment")
                        .WithMany()
                        .HasForeignKey("AppoinmentId");

                    b.HasOne("AppoinmentScheduler.Models.Users", "SlotUserBy")
                        .WithMany()
                        .HasForeignKey("SlotUserById");

                    b.Navigation("Appoinment");

                    b.Navigation("SlotUserBy");
                });

            modelBuilder.Entity("AppoinmentScheduler.Models.Users", b =>
                {
                    b.HasOne("AppoinmentScheduler.Models.RootUsers", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId");

                    b.Navigation("Organization");
                });
#pragma warning restore 612, 618
        }
    }
}
